import threading
import random
import xml.etree.ElementTree as ET
from queue import Queue

# Define the ITstudent class
class ITstudent:
    def __init__(self, name, student_id, programme, courses, marks):
        self.name = name
        self.student_id = student_id
        self.programme = programme
        self.courses = courses
        self.marks = marks

    def calculate_average_mark(self):
        return sum(self.marks) / len(self.marks)

    def is_passed(self):
        average_mark = self.calculate_average_mark()
        return average_mark >= 50

# Define the producer function
def producer(buffer):
    for i in range(1, 11):
        # Generate random student information
        name = f"Student {i}"
        student_id = str(random.randint(10000000, 99999999))
        programme = "IT"
        courses = ["Course A", "Course B", "Course C"]
        marks = [random.randint(0, 100) for _ in range(len(courses))]

        # Create XML file
        root = ET.Element("Student")
        ET.SubElement(root, "Name").text = name
        ET.SubElement(root, "StudentID").text = student_id
        ET.SubElement(root, "Programme").text = programme
        courses_elem = ET.SubElement(root, "Courses")
        for course, mark in zip(courses, marks):
            course_elem = ET.SubElement(courses_elem, "Course")
            ET.SubElement(course_elem, "Name").text = course
            ET.SubElement(course_elem, "Mark").text = str(mark)

        tree = ET.ElementTree(root)
        tree.write(f"student{i}.xml")

        # Add file number to buffer
        buffer.put(i)

# Define the consumer function
def consumer(buffer):
    while True:
        # Get file number from buffer
        file_number = buffer.get()

        # Read XML file
        tree = ET.parse(f"student{file_number}.xml")
        root = tree.getroot()

        # Extract student information from XML
        name = root.find("Name").text
        student_id = root.find("StudentID").text
        programme = root.find("Programme").text
        courses = []
        marks = []
        for course_elem in root.find("Courses"):
            course = course_elem.find("Name").text
            mark = int(course_elem.find("Mark").text)
            courses.append(course)
            marks.append(mark)

        # Create ITstudent object
        student = ITstudent(name, student_id, programme, courses, marks)

        # Calculate average mark and pass/fail information
        average_mark = student.calculate_average_mark()
        pass_fail = "Pass" if student.is_passed() else "Fail"

        # Print student information
        print("Student Name:", student.name)
        print("Student ID:", student.student_id)
        print("Programme:", student.programme)
        print("Courses and Marks:")
        for course, mark in zip(student.courses, student.marks):
            print(course, "-", mark)
        print("Average Mark:", average_mark)
        print("Pass/Fail:", pass_fail)
        print()

        # Clear XML file and remove file number from buffer
        tree.getroot().clear()
        buffer.task_done()

# Create a shared buffer with a maximum size of 10 elements
buffer = Queue(maxsize=10)

# Create producer and consumer threads
producer_thread = threading.Thread(target=producer, args=(buffer,))
consumer_thread = threading.Thread(target=consumer, args=(buffer,))

# Start the threads
producer_thread.start()
consumer_thread.start()

# Wait for the threads to finish
producer_thread.join()
consumer_thread.join()
